apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
        encoding = 'UTF-8'
    }

    defaultConfig {
        applicationId "br.com.battista.bgscore"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        buildConfigField "long", "BUILD_UPDATED", System.currentTimeMillis() + "L"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "BGScore"
            resValue "string", "title_app", "BGScore"
        }
        debug {
            minifyEnabled false
            testCoverageEnabled = false
            resValue "string", "app_name", "BGScore (debug)"
            resValue "string", "title_app", "BGScore (debug)"
        }
    }
    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
            versionCode 1
            versionName "1.0.0"
        }
        prod {
            applicationIdSuffix = ".app"
            versionCode 1
            versionName "1.0.0"
        }
        dev {
            applicationIdSuffix = ".dev"
            versionCode 4
            versionName "1.0.3-beta"
        }
    }
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release')
                && (variant.getFlavors().get(0).name.equals('mock')
                || variant.getFlavors().get(0).name.equals('dev'))) {
            variant.setIgnore(true);
        }
    }
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support:support-v4:$rootProject.ext.supportLibraryVersion"

    compile "com.android.support:design:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support:cardview-v7:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support.constraint:constraint-layout:$rootProject.ext.constraintVersion"
    compile "com.android.support:percent:$rootProject.ext.supportLibraryVersion"
    compile "com.weiwangcn.betterspinner:library-material:$rootProject.ext.libraryMaterialVersion"

    compile "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    compile "de.hdodenhof:circleimageview:$rootProject.ext.circleimageviewVersion"
    compile "com.google.guava:guava:$rootProject.ext.guavaVersion"

    compile "com.squareup.retrofit2:retrofit:$rootProject.ext.retrofitVersion"
    compile "com.squareup.retrofit2:converter-jackson:$rootProject.ext.retrofitVersion"
    compile "com.squareup.okhttp3:okhttp:$rootProject.ext.okhttpVersion"
    compile "com.squareup.okhttp3:okhttp-urlconnection:$rootProject.ext.okhttpVersion"
    compile "com.squareup.okhttp3:logging-interceptor:$rootProject.ext.okhttpVersion"

    compile "com.github.satyan:sugar:$rootProject.ext.sugarVersion"
    compile "com.android.support:multidex:$rootProject.ext.multidexVersion"

    compile "org.greenrobot:eventbus:$rootProject.ext.eventBusVersion"
    compile "br.com.jansenfelipe:androidmask:$rootProject.ext.androidmaskVersion"

    testCompile "junit:junit:$rootProject.ext.junitVersion"
    testCompile "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    testCompile "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testCompile "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockitoVersion"
    testCompile "org.powermock:powermock-api-mockito2:$rootProject.ext.powerMockitoVersion"
    testCompile "org.powermock:powermock-core:$rootProject.ext.powerMockitoVersion"

    androidTestCompile "com.android.support.test:runner:$rootProject.ext.runnerVersion"
    androidTestCompile "com.android.support.test:rules:$rootProject.ext.rulesVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"

    compile "com.android.support:support-v4:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support.constraint:constraint-layout:$rootProject.ext.constraintVersion"
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:answers:1.3.13@aar') {
        transitive = true;
    }
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:support-v4:26.+'
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}
